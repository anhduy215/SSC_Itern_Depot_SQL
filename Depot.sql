CREATE TABLE FullStatus (
    FullStatusID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    Status VARCHAR2(10) NOT NULL,
    CONSTRAINT uq_status UNIQUE (Status)
);
CREATE TABLE ContainerSize (
    SizeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ContainerSize NUMBER NOT NULL,
    CONSTRAINT chk_container_size_positive CHECK (ContainerSize >= 0),
    CONSTRAINT uq_container_size UNIQUE (ContainerSize)
);
CREATE TABLE VehicleType (
    VehicleTypeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    VehicleTypeName VARCHAR2(50)NOT NULL,
    CONSTRAINT uq_vehicle_type_name UNIQUE (VehicleTypeName)
);

CREATE TABLE ContainerType (
    TypeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    TypeName VARCHAR2(20) NOT NULL,
    TypeCode CHAR(3) NOT NULL,
    Description VARCHAR2(255),
    CONSTRAINT uq_container_type_name_code UNIQUE (TypeName, TypeCode)
);
CREATE TABLE ContainerOwner (
    OwnerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
    OwnerName VARCHAR2(100) NOT NULL, 
    OwnerCode VARCHAR2(5) NOT NULL, 
    ContactInfo VARCHAR2(100),  
    CompanyName VARCHAR2(100), 
    ContainerCount NUMBER DEFAULT 0,
    CONSTRAINT uq_owner_name_code UNIQUE (OwnerName,OwnerCode),
    CONSTRAINT chk_container_count CHECK (ContainerCount >= 0)
);--toi day
CREATE TABLE Ship (
    ShipID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ShipName VARCHAR2(100) NOT NULL,
    Status  VARCHAR2(30) NOT NULL
);
CREATE TABLE Voyage (
    VoyageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ShipID NUMBER NOT NULL,
    DepartureDate DATE NOT NULL,
    ArrivalDate DATE,
    CONSTRAINT fk_ship FOREIGN KEY (ShipID) REFERENCES Ship(ShipID)
);
CREATE TABLE LocationStatus (
    StatusID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    Status VARCHAR2(10) NOT NULL
);
CREATE TABLE ContainerStatus (
    StatusID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ContainerStatus VARCHAR2(100) NOT NULL
);
CREATE TABLE LineOperator (
    LineOperatorID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,  
    LineOperatorName VARCHAR2(100) NOT NULL,
    LineOperatorCode VARCHAR2(5) NOT NULL,
    ContactInfo VARCHAR2(50),
    CompanyName VARCHAR2(100),
    ActiveContracts NUMBER DEFAULT 0
);
CREATE TABLE Depot (
    DepotID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    DepotName VARCHAR2(50) NOT NULL,
    Location VARCHAR2(100),
    BlockCapacity NUMBER,
    Contact VARCHAR2(50)
);
CREATE TABLE UserAccount (
    UserID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    UserName VARCHAR2(20) NOT NULL,
    UserPassword VARCHAR2(20) NOT NULL
);
CREATE TABLE VirtualBlock (
    VirtualBlockID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    BlockName VARCHAR2(10) NOT NULL,
    Description VARCHAR2(200),
    DepotID NUMBER NOT NULL,  
    CONSTRAINT fk_depot
        FOREIGN KEY (DepotID) 
        REFERENCES Depot (DepotID)
);
CREATE TABLE ContainerBlock (
    BlockID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    BayRange NUMBER CHECK (BayRange BETWEEN 1 AND 5),
    RowRange NUMBER CHECK (RowRange BETWEEN 1 AND 10),
    TierRange NUMBER CHECK (TierRange BETWEEN 1 AND 5),
    DepotID NUMBER,
    CONSTRAINT fk_depot2
        FOREIGN KEY (DepotID) 
        REFERENCES Depot (DepotID)
);
CREATE TABLE Command (
    CommandID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    TaxCode VARCHAR2(20),
    CustomerName VARCHAR2(100),
    Deadline DATE,
    CreateDate DATE,
    ContainerQuantity NUMBER,
    LineOperatorID NUMBER,
    VoyageID NUMBER,
    CONSTRAINT fk_voyage
        FOREIGN KEY (VoyageID) 
        REFERENCES Voyage (VoyageID),
    CONSTRAINT fk_line_operator
        FOREIGN KEY (LineOperatorID) 
        REFERENCES LineOperator (LineOperatorID)
);
CREATE TABLE Container (
    ContainerNumber NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    ISO VARCHAR2(20),
    MaximumWeight NUMBER,
    TareWeight NUMBER,
    DateOfManufacture DATE,
    SizeID NUMBER,
    ContainerStatus NUMBER,
    OwnerID NUMBER,
    ContainerType NUMBER,
    VirtualBlockID NUMBER,
    LocationStatus NUMBER,
    LineOperatorID NUMBER,
    FullStatusID NUMBER,
    CONSTRAINT fk_size
        FOREIGN KEY (SizeID) 
        REFERENCES ContainerSize (SizeID),
    CONSTRAINT fk_container_status
        FOREIGN KEY (ContainerStatus) 
        REFERENCES ContainerStatus (StatusID),
    CONSTRAINT fk_owner
        FOREIGN KEY (OwnerID) 
        REFERENCES ContainerOwner (OwnerID),
    CONSTRAINT fk_container_type
        FOREIGN KEY (ContainerType) 
        REFERENCES ContainerType (TypeID),
    CONSTRAINT fk_virtual_block
        FOREIGN KEY (VirtualBlockID) 
        REFERENCES VirtualBlock (VirtualBlockID),
    CONSTRAINT fk_location_status
        FOREIGN KEY (LocationStatus) 
        REFERENCES LocationStatus (StatusID),
    CONSTRAINT fk_line_operator2
        FOREIGN KEY (LineOperatorID) 
        REFERENCES LineOperator (LineOperatorID),
    CONSTRAINT fk_full_status
        FOREIGN KEY (FullStatusID) 
        REFERENCES FullStatus (FullStatusID),
    CONSTRAINT chk_virtual_block_null CHECK (LocationStatus = 2 OR VirtualBlockID IS NULL)
);
CREATE TABLE LifeCycle (
    LifeCycleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ContainerNumber NUMBER NOT NULL,  -- Tham chi?u t?i b?ng Container
    EntryDate DATE NOT NULL,  -- Ngày container nh?p bãi
    ExitDate DATE,
    CONSTRAINT fk_container_life FOREIGN KEY (ContainerNumber) REFERENCES Container(ContainerNumber)
);
CREATE TABLE PositionContainer (
    PositionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    Status VARCHAR2(50),
    Bay NUMBER,
    RowNumber NUMBER,
    TierNumber NUMBER,
    ContainerNumber NUMBER,
    BlockID NUMBER,
     CONSTRAINT fk_container2
        FOREIGN KEY (ContainerNumber) 
        REFERENCES Container (ContainerNumber),
    CONSTRAINT fk_block
        FOREIGN KEY (BlockID) 
        REFERENCES ContainerBlock (BlockID)
);
CREATE TABLE Vehicle (
    VehicleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    LicensePlate VARCHAR2(15) NOT NULL,
    DriverName VARCHAR2(30),
    DriverContact VARCHAR2(15),
    VehicleCapacity NUMBER,
    CompanyName VARCHAR2(50),
    Status VARCHAR2(30) NOT NULL,
    VehicleTypeID NUMBER NOT NULL,
    CONSTRAINT fk_vehicle_type
        FOREIGN KEY (VehicleTypeID)
        REFERENCES VehicleType (VehicleTypeID)
);
CREATE TABLE IOManagement (
    ManageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    MovementType VARCHAR2(5) NOT NULL,
    CreateDate DATE,
    VehicleID NUMBER,
    ContainerNumber NUMBER,
    CommandID NUMBER,
    UserID NUMBER,
    CONSTRAINT fk_vehicle
        FOREIGN KEY (VehicleID) 
        REFERENCES Vehicle (VehicleID),
     CONSTRAINT fk_container
        FOREIGN KEY (ContainerNumber) 
        REFERENCES Container (ContainerNumber),
    CONSTRAINT fk_command
        FOREIGN KEY (CommandID) 
        REFERENCES Command (CommandID),
    CONSTRAINT fk_user
        FOREIGN KEY (UserID) 
        REFERENCES UserAccount (UserID)
);
--trigger--------------------------------------------------------------------------
--trigger check bay row tier range
CREATE OR REPLACE TRIGGER trg_check_position_range
BEFORE INSERT OR UPDATE ON PositionContainer
FOR EACH ROW
DECLARE
    v_bay_range NUMBER;
    v_row_range NUMBER;
    v_tier_range NUMBER;
BEGIN
    -- L?y giá tr? BayRange, RowRange, TierRange t? b?ng ContainerBlock
    BEGIN
        SELECT BayRange, RowRange, TierRange
        INTO v_bay_range, v_row_range, v_tier_range
        FROM ContainerBlock
        WHERE BlockID = :NEW.BlockID;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'BlockID ' || :NEW.BlockID || ' does not exist in ContainerBlock.');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20005, 'Multiple rows found for BlockID ' || :NEW.BlockID || '.');
    END;

    -- Ki?m tra xem Bay, Row, và Tier có v??t quá giá tr? t?i ?a không
    IF :NEW.Bay > v_bay_range THEN
        RAISE_APPLICATION_ERROR(-20001, 'Bay value exceeds the maximum range for BlockID ' || :NEW.BlockID);
    END IF;

    IF :NEW.RowNumber > v_row_range THEN
        RAISE_APPLICATION_ERROR(-20002, 'Row value exceeds the maximum range for BlockID ' || :NEW.BlockID);
    END IF;

    IF :NEW.TierNumber > v_tier_range THEN
        RAISE_APPLICATION_ERROR(-20003, 'Tier value exceeds the maximum range for BlockID ' || :NEW.BlockID);
    END IF;
END;
/
--trigger ki?m tra không ???c t?n t?i 1 container v?i 2 v? trí active
CREATE OR REPLACE TRIGGER trg_check_active_status
BEFORE INSERT OR UPDATE ON PositionContainer
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    -- kiem tra so luong ghi voi cùng ContainerNumber và Status = 'active'
    SELECT COUNT(*)
    INTO v_count
    FROM PositionContainer
    WHERE ContainerNumber = :NEW.ContainerNumber
      AND Status = 'active'
      AND (PositionID <> :NEW.PositionID OR :NEW.PositionID IS NULL);

    -- neu da co ban ghi active, không cho phép thêm ban ghi moi voi Status = 'active'
    IF v_count > 0 AND :NEW.Status = 'active' THEN
        RAISE_APPLICATION_ERROR(-20001, 'ContainerNumber cannot have multiple records with status ''active''.');
    END IF;
END;
/
--check bay chan le xep cont 40 20
CREATE OR REPLACE TRIGGER check_container_position
BEFORE INSERT OR UPDATE ON PositionContainer
FOR EACH ROW
DECLARE
    v_container_size NUMBER; -- Container size (20 or 40 feet)
BEGIN
    -- Query container size from the ContainerSize table
    BEGIN
        SELECT cs.ContainerSize
        INTO v_container_size
        FROM Container c
        JOIN ContainerSize cs ON c.SizeID = cs.SizeID
        WHERE c.ContainerNumber = :NEW.ContainerNumber;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'Container does not exist.');
    END;

    -- Check if the container size is 20 feet and the bay is odd
    IF v_container_size = 20 THEN
        IF MOD(:NEW.Bay, 2) = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, '20 feet containers cannot be placed in even-numbered bays.');
        END IF;
    -- Check if the container size is 40 feet and the bay is even
    ELSIF v_container_size = 40 THEN
        IF MOD(:NEW.Bay, 2) <> 0 THEN
            RAISE_APPLICATION_ERROR(-20002, '40 feet containers cannot be placed in odd-numbered bays.');
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20003, 'Invalid container size.');
    END IF;
END;
/
--trigger check khong the ton tai 2 cont cung 1 cho
CREATE OR REPLACE TRIGGER check_active_container_position
BEFORE INSERT OR UPDATE ON PositionContainer
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM PositionContainer
    WHERE Bay = :NEW.Bay
      AND RowNumber = :NEW.RowNumber
      AND TierNumber = :NEW.TierNumber
      AND BlockID = :NEW.BlockID
      AND Status = 'active'
      AND PositionID != :NEW.PositionID;

    IF v_count > 0 AND :NEW.Status = 'active' THEN
        RAISE_APPLICATION_ERROR(-20001, 'This position already has an active container.');
    END IF;
END;
/


--insert-----------------------------------------------------------------------------------------------------
--FullStatus
INSERT INTO FullStatus (Status) VALUES ('Full');
INSERT INTO FullStatus (Status) VALUES ('Empty');
--ContainerSize
INSERT INTO ContainerSize (ContainerSize) VALUES (20);
INSERT INTO ContainerSize (ContainerSize) VALUES (40);
INSERT INTO ContainerSize (ContainerSize) VALUES (45);
--VehicleType
INSERT INTO VehicleType (VehicleTypeName) VALUES ('Container Truck');
INSERT INTO VehicleType (VehicleTypeName) VALUES ('Forklift');
INSERT INTO VehicleType (VehicleTypeName) VALUES ('Cranes');
INSERT INTO VehicleType (VehicleTypeName) VALUES ('Reefer Truck');
INSERT INTO VehicleType (VehicleTypeName) VALUES ('Flatbed Truck');
--containerType
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('Dry Container', 'D', 'Standard dry container for general cargo.');
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('Reefer Container', 'R', 'Refrigerated container for perishable goods.');
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('Open Top Container', 'O', 'Container with an open top for oversized cargo.');
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('Flat Rack Container', 'F', 'Flat container with collapsible sides for heavy or oversized cargo.');
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('High Cube Container', 'H', 'Taller than standard dry container, used for oversized cargo.');
INSERT INTO ContainerType (TypeName, TypeCode, Description) VALUES ('Tank Container', 'T', 'Specialized container for transporting liquids.');
--owner
INSERT INTO ContainerOwner (OwnerName, OwnerCode, ContactInfo, CompanyName, ContainerCount) 
VALUES ('CMA CGM', 'CMA', '0212345678', 'CMA CGM S.A.', 10);
INSERT INTO ContainerOwner (OwnerName, OwnerCode, ContactInfo, CompanyName, ContainerCount) 
VALUES ('Mediterranean Shipping Company', 'MSC', '0212345679', 'Mediterranean Shipping Company S.A.', 8);
INSERT INTO ContainerOwner (OwnerName, OwnerCode, ContactInfo, CompanyName, ContainerCount) 
VALUES ('Hyundai Merchant Marine', 'HMM', '0212345680', 'Hyundai Merchant Marine Co., Ltd.', 5);
--ship
INSERT INTO Ship (ShipName, Status) VALUES ('Evergreen Ever Ace', 'Active');
INSERT INTO Ship (ShipName, Status) VALUES ('HMM Algeciras', 'Active');
INSERT INTO Ship (ShipName, Status) VALUES ('MSC Gülsün', 'InActive');
INSERT INTO Ship (ShipName, Status) VALUES ('CMA CGM Jacques Saadé', 'Active');
--voyage
INSERT INTO Voyage (ShipID, DepartureDate, ArrivalDate) 
VALUES (1, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-15', 'YYYY-MM-DD'));
INSERT INTO Voyage (ShipID, DepartureDate, ArrivalDate) 
VALUES (2, TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-20', 'YYYY-MM-DD'));
INSERT INTO Voyage (ShipID, DepartureDate) 
VALUES (3, TO_DATE('2024-03-01', 'YYYY-MM-DD'));
INSERT INTO Voyage (ShipID, DepartureDate, ArrivalDate) 
VALUES (4, TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-04-18', 'YYYY-MM-DD'));
--locationstatus
INSERT INTO LocationStatus (Status) VALUES ('InBlock');
INSERT INTO LocationStatus (Status) VALUES ('Movement');
INSERT INTO LocationStatus (Status) VALUES ('Complete');
--containerStatus
-- Tình tr?ng 1: Không hu hong
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('No Damage');
-- Tình tr?ng 2: Hu hong nhe
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('Minor Damage');
-- Tình tr?ng 3: Hu hong nong
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('Major Damage');
-- Tình tr?ng 4: Móp méo
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('Bent');
-- Tình tr?ng 5: Nut
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('Cracked');
-- Tình tr?ng 6: Ri sét
INSERT INTO ContainerStatus (ContainerStatus) VALUES ('Rusty');
--linOper
INSERT INTO LineOperator (LineOperatorName, LineOperatorCode, ContactInfo, CompanyName, ActiveContracts)
VALUES ('CMA CGM', 'CMA', 'contact@cma-cgm.com', 'CMA CGM Group', 15);
INSERT INTO LineOperator (LineOperatorName, LineOperatorCode, ContactInfo, CompanyName, ActiveContracts)
VALUES ('Mediterranean Shipping Company', 'MSC', 'info@msc.com', 'Mediterranean Shipping Company', 20);
INSERT INTO LineOperator (LineOperatorName, LineOperatorCode, ContactInfo, CompanyName, ActiveContracts)
VALUES ('Hyundai Merchant Marine', 'HMM', 'support@hmm21.com', 'Hyundai Merchant Marine', 10);
INSERT INTO LineOperator (LineOperatorName, LineOperatorCode, ContactInfo, CompanyName, ActiveContracts)
VALUES ('Evergreen Marine', 'EGL', 'service@evergreen-marine.com', 'Evergreen Marine Corp', 12);
INSERT INTO LineOperator (LineOperatorName, LineOperatorCode, ContactInfo, CompanyName, ActiveContracts)
VALUES ('ONE Line', 'ONE', 'customer.service@one-line.com', 'Ocean Network Express', 8);
--depot
INSERT INTO Depot (DepotName, Location, BlockCapacity, Contact)
VALUES ('Depot 1', 'Location 1', 10, 'contact1@example.com');
--account
INSERT INTO UserAccount (UserName, UserPassword)
VALUES ('admin', '123');
--virtual block
INSERT INTO VirtualBlock (BlockName, Description, DepotID)
VALUES ('BlockA', 'Virtual block for storage of large containers.', 1);
--ContainerBlock
INSERT INTO ContainerBlock (BayRange, RowRange, TierRange, DepotID) VALUES (3, 5, 4, 1);
INSERT INTO ContainerBlock (BayRange, RowRange, TierRange, DepotID) VALUES (4, 6, 5, 1);
--command
INSERT INTO Command (TaxCode, CustomerName, Deadline, CreateDate, ContainerQuantity, LineOperatorID, VoyageID) 
VALUES ('123456789', 'Company A', TO_DATE('2024-09-15', 'YYYY-MM-DD'), SYSDATE, 18, 1, 1);
INSERT INTO Command (TaxCode, CustomerName, Deadline, CreateDate, ContainerQuantity, LineOperatorID, VoyageID) 
VALUES ('987654321', 'Company B', TO_DATE('2024-10-01', 'YYYY-MM-DD'), SYSDATE, 50, 2, 2);
INSERT INTO Command (TaxCode, CustomerName, Deadline, CreateDate, ContainerQuantity, LineOperatorID, VoyageID) 
VALUES ('112233445', 'Company C', TO_DATE('2024-11-10', 'YYYY-MM-DD'), SYSDATE, 44, 3, 3);
INSERT INTO Command (TaxCode, CustomerName, Deadline, CreateDate, ContainerQuantity, LineOperatorID, VoyageID) 
VALUES ('556677889', 'Company D', TO_DATE('2024-12-05', 'YYYY-MM-DD'), SYSDATE, 66, 4, 4);
INSERT INTO Command (TaxCode, CustomerName, Deadline, CreateDate, ContainerQuantity, LineOperatorID, VoyageID) 
VALUES ('998877665', 'Company E', TO_DATE('2024-12-20', 'YYYY-MM-DD'), SYSDATE, 15, 5, 1);
--container
INSERT INTO Container (
    MaximumWeight,
    TareWeight,
    DateOfManufacture,
    SizeID,
    ContainerStatus,
    OwnerID,
    ContainerType,
    VirtualBlockID,
    LocationStatus,
    LineOperatorID,
    FullStatusID
) VALUES (
    25000,  -- MaximumWeight
    5000,   -- TareWeight
    TO_DATE('2024-01-01', 'YYYY-MM-DD'),  -- DateOfManufacture
    1,      -- SizeID
    1,      -- ContainerStatus
    3,      -- OwnerID
    2,      -- ContainerType
    1,     -- VirtualBlockID (không NULL vì LocationStatus là 2)
    2,      -- LocationStatus
    3,      -- LineOperatorID
    1       -- FullStatusID
);

-- Chèn d? li?u khi LocationStatus khác 2, nên VirtualBlockID ph?i NULL
INSERT INTO Container (
    MaximumWeight,
    TareWeight,
    DateOfManufacture,
    SizeID,
    ContainerStatus,
    OwnerID,
    ContainerType,
    VirtualBlockID,
    LocationStatus,
    LineOperatorID,
    FullStatusID
) VALUES (
    30000,  -- MaximumWeight
    6000,   -- TareWeight
    TO_DATE('2024-06-15', 'YYYY-MM-DD'),  -- DateOfManufacture
    2,      -- SizeID
    2,      -- ContainerStatus
    1,      -- OwnerID
    1,      -- ContainerType
    NULL,   -- VirtualBlockID (NULL vì LocationStatus khác 2)
    1,      -- LocationStatus (khác 2)
    3,      -- LineOperatorID
    2       -- FullStatusID
);
--lifeCycle
INSERT INTO LifeCycle (ContainerNumber, EntryDate, ExitDate)
VALUES (
    1, -- ContainerID c?a container này trong b?ng Container (gi? s? ContainerID là 1)
    TO_DATE('2024-08-20', 'YYYY-MM-DD'),  -- Ngày nh?p bãi (EntryDate)
    NULL  -- Ch?a có ExitDate vì container v?n ?ang ? bãi
);
INSERT INTO LifeCycle (ContainerNumber, EntryDate, ExitDate)
VALUES (
    2, 
    TO_DATE('2024-08-10', 'YYYY-MM-DD'), 
    NULL 
);

--positioncontainer
--BlockID = 1
INSERT INTO PositionContainer (Status, Bay, RowNumber, TierNumber, ContainerNumber, BlockID)
VALUES ('active', 2, 1, 1, 2, 2);

INSERT INTO PositionContainer (Status, Bay, RowNumber, TierNumber, ContainerNumber, BlockID)
VALUES ('inactive', 2, 3, 2, 2, 1);

--BlockID = 2
INSERT INTO PositionContainer (Status, Bay, RowNumber, TierNumber, ContainerNumber, BlockID)
VALUES ('active', 1, 1, 1, 1, 2);

INSERT INTO PositionContainer (Status, Bay, RowNumber, TierNumber, ContainerNumber, BlockID)
VALUES ('inactive', 1, 4, 2, 1, 1);


--drop-----------------------------------------------------------------------------
DROP TABLE PositionContainer;
DROP TABLE IOManagement;
DROP TABLE LifeCycle;
DROP TABLE Container;
DROP TABLE Command;
DROP TABLE ContainerBlock;
DROP TABLE VirtualBlock;
DROP TABLE UserAccount;
DROP TABLE Depot;
DROP TABLE LineOperator;
DROP TABLE ContainerStatus;
DROP TABLE LocationStatus;
DROP TABLE ContainerOwner;
DROP TABLE ContainerType;
DROP TABLE Vehicle;
DROP TABLE VehicleType;
DROP TABLE ContainerSize;
DROP TABLE Voyage;
DROP TABLE Ship;
DROP TABLE FullStatus;